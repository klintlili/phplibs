从源码角度来讲
第一步先会用，再看源代码，看源码，了解框架运转机制
总结框架共性，方便快速学习其他框架

zend framework,YII,TP,laravel,

学习框架的思路
下载安装
目录结构
单入口文件（保安）
如何写控制器
如何写model(与model的首次见面，是在操作数据库的时候，所以，老认为model就是操作数据库了）
model是对业务的封装和抽象，或者数据的操作，好比，菜市场和超市的概念
如何写视图（十字绣的模板）
数据库操作
扩展类库的使用
不仅学习TP

1框架概念
框架是半成品，就像烤肉的木炭。像电脑桌一样，有放键盘的抽屉，机箱右边等框框设计好了，等着你来
填充。


框架和库的区别
框架调用我们的代码，我们的代码调用库文件

提出问题
	重复性工作
	安全性工作
	跨平台(大小写，权限等）
	跨版本
	个人开发已经过时，适合团队开发
为啥不用框架
	效率低（脚本语言，不驻留内存）
	应用门槛上升，增加学习成本，php定位中小企业应用相违背
	大型框架考虑的因素过多（配置，各种类库，文件多，目录结构等）

所以不用又不行，各个公司，大家简化了最常用的功能。
最终还是用了框架（学它的思想，如何学思想，还是学框架，然后再总结）

程序效率（大内存，大存储，高宽带）的重要性已经让步于开发效率（开发效率重要性）
硬件（摩尔定律，18个月一变）
软件（好久也不咋地）
笑话，比尔盖茨说了，一兆内存就够用了

mvc
为啥需要框架
因为框架就是mvc的一种实现
	是一种设计模式，一种理论，而框架是mvc模式的一种实现。
	

下载安装，讲解目录 
TP执行流程
	ThinkPHP.php->think.class.php
	Think::start()
	配置自动加载类（当前类的方法）
	配置shutdown函数（当前类的方法）
	配置错误处理类（当前类的方法）
	配置异常处理类（当前类的方法）
	配置框架环境（加载不到10个配置文件）

	App::run();
	调试模式有什么用

框架和类库的区别
框架调用 模块--控制器--操作。而具体的操作调用  类库（文件上传，图片，分页等）




控制器和model的使用，重点是model，数据库的操作

控制器的应用
	url模式四种模式
	方法跳转，函数跳转
	display();


讲模型的使用

模型实例化的过程，即如何确定表信息的    一小时

curd  原始sql                           一小时

自动验证    两个小时



视图
	1 如何寻找模板
		3中，display(),display('aa'),display('aa:bb'),display('./TPL/User/add.html')
	2 变量展示到模板
		变量交给模板引擎存储，模板引擎找模板来放置变量
	3 模板的语法细究
		逻辑判断
		数组展示
		变量调节器
		包含子模板
		include 是各个模板文件内容的拼接一个模板文件里
		import则是<link xxx/> <script>这样的

		TP引擎模板替换后的if语法是  ：endif型的。（看手册)


		TP的默认模板引擎对标签的解释，都在这个文件里
		ThinkPHP/library/Think/template/driver/Taglib/Cx.class.php
		也叫Cx标签库，对应还有Html标签库，内置标签库Cx和扩展标签库Html
		在模板文件中的使用是不一样的

缓存
	S()
	以下两个配置一块使用，开启子目录缓存并且设置子目录层级是3
	DATA_CACHE_SUBDIR=true
	DATA_CACHE_LEVEL=3
	当一个目录下，小的文件很多的时候(比如超过1000），磁盘IO有压力，所以使用多层缓存

	如何处理缓存冲突，比如S('list')的list多次设置缓存
		解决办法，可以在S方法里，增加$name前缀为，当前controller.action.$name
		使得缓存的键值高度唯一性，就可以了。
	默认缓存的键值是DATA_CACHE_PREFIX.md5(DATA_CACHE_KEY.$name);
	

	如何设置缓存时间
	如何清除缓存

	S函数的第三个参数是数组，是缓存的一些配置，是临时的，只在本次生效
	而真正长久生效的，还是那些DATA_CACHE_XXX系列的配置参数

	更换缓存驱动（memcache,redis，file等)

	缓存函数S,缓存类Cache.class.php  真正的缓存驱动（file,memcache,redis等），
	S缓存机制如果应用缓存队列选项时，涉及到F函数

	看底层的缓存驱动，看到了memcache和memcached两个memcache客户端
	它们是基于两个C库写的。


TP-ajax
		var obj='';
		if(window.XMLHttpRequest)
		   obj=new XMLHttpRequest();
		else
		   obj=new window.ActiveXObject('Microsoft.XMLHTTP');
		return obj;
		
		
	